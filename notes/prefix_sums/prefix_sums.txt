# Title: Prefix Sums

This contains information about what a prefix sums is and were to apply
it. This documents will contain exerts from grok ai and other sources as 
well as some documentation from me as well. It basically notes.

Note: If you see a See src/prefix_sums/example01.cpp for example this is 
example code that I've written about the subject. There will also be 
additional

## Prefix Sums (or Cumulative Sums)

Prefix sums, also known as cumulative sums, are a technique used in computer science and mathematics to precompute sums 
of elements in an array up to each position. This can significantly speed up queries asking for the sum of any subarray 
or range within the array.

Here's a brief explanation:

Definition: Given an array A with n elements, the prefix sum array P is defined such that P[i] is the sum of all elements
in A from index 0 to i. Mathematically, P[i] = A[0] + A[1] + ... + A[i].

Formula: 
P[0] = A[0]
For i > 0, P[i] = P[i-1] + A[i]

Use Cases:
Range Sum Query: If you want to find the sum of elements from index j to k (inclusive), you can use P[k] - P[j-1] (assuming 
j > 0, otherwise it's just P[k] for j = 0).

Reducing Time Complexity: For multiple queries on sums of different ranges, computing prefix sums once reduces the time 
complexity for each query from O(n) to O(1).

Example:

Let's say we have an array A = [1, 2, 3, 4, 5]. The prefix sum array P would be:

P[0] = 1
P[1] = 1 + 2 = 3
P[2] = 3 + 3 = 6
P[3] = 6 + 4 = 10
P[4] = 10 + 5 = 15

So, P = [1, 3, 6, 10, 15].

To find the sum from index 1 to 3 in A, you would calculate P[3] - P[0] = 10 - 1 = 9.

Here's how you might implement this in Python:

python
    def prefix_sums(arr):
        p = [0] * len(arr)
        p[0] = arr[0]
        for i in range(1, len(arr)):
            p[i] = p[i-1] + arr[i]
        return p



# Example usage
A = [1, 2, 3, 4, 5]
P = prefix_sums(A)
print(P)  # Output: [1, 3, 6, 10, 15]

See src/prefix_sums/example01.cpp

Exercise 01:
Make a program that takes in array and give returns the prefix sum array for
these examples.

1
Array: [1, 2, 3, 4]
Prefix Sum: [1, 3, 6, 10]

2
Array: [5, -1, 3, 7]
Prefix Sum: [5, 4, 7, 14]

3
Array: [0, 0, 0, 1]
Prefix Sum: [0, 0, 0, 1]

4
Array: [10, -5, 20, 15]
Prefix Sum: [10, 5, 25, 40]

5
Array: [2, 3, 5, 7, 11]
Prefix Sum: [2, 5, 10, 17, 28]

6
Array: [-1, -2, -3, -4]
Prefix Sum: [-1, -3, -6, -10]

7
Array: [1, 1, 1, 1, 1]
Prefix Sum: [1, 2, 3, 4, 5]

8
Array: [9, 8, 7, 6, 5]
Prefix Sum: [9, 17, 24, 30, 35]

9
Array: [4, 0, 0, 0, 4]
Prefix Sum: [4, 4, 4, 4, 8]

10
Array: [3, -3, 3, -3, 3]
Prefix Sum: [3, 0, 3, 0, 3]

See src/prefix_sums/example02.cpp for a bunch of examples on varius 
arrays.

Prefix sums are particularly useful in algorithms where you need to compute sums over ranges frequently, 
like in dynamic programming, data structures like segment trees, or for optimizing certain types of queries 
in competitive programming.

# Applications of Prefix Sums

Prefix sums have numerous applications across various fields due to their efficiency in handling sum queries 
over ranges. Here are some key applications:

## Range Sum Queries:

Prefix sums allow for O(1) time complexity to compute the sum of any subarray once the prefix sum array 
is computed. This is particularly useful in scenarios where you need to frequently query sums over different 
ranges of an array.

## Dynamic Programming:

In some dynamic programming problems, prefix sums can precompute partial results, making the computation of 
subsequent steps faster, especially in problems involving subarray sums.

## Subarray Problems:

Checking if there's a subarray with sum zero or finding all subarrays with a specific sum can be efficiently 
done with prefix sums, reducing time complexity from O(n^3) or O(n^2) to O(n) in some cases.

## Sliding Window Techniques:

For algorithms that use sliding windows over an array, prefix sums can quickly calculate the sum within the 
current window, improving performance over recalculating the sum each time.

Counting Subarrays with Specific Properties:
Counting subarrays with sum equal to a target value, or the number of subarrays with sum less than a 
given value, can be done more efficiently with prefix sums.

##2D Prefix Sum (for 2D arrays):

Extends the concept to two dimensions for quick sum queries in any rectangular region of a matrix, useful 
in image processing, game design, or any scenario involving 2D data.

##Time Series Analysis:

In data analysis, especially with time series data, prefix sums can be used to quickly calculate cumulative 
metrics like running totals or averages over time periods.

##Real-time Data Processing:

In applications requiring real-time data analysis, prefix sums can provide instant results for queries about 
data accumulated up to certain points, like in financial systems or live sports statistics.
String Matching and Algorithmic Problems:

Certain string matching problems or complex algorithmic questions in competitive programming can benefit from 
prefix sums for efficient sum-based checks or comparisons.

##Space Efficiency in Algorithms:

Although prefix sums require additional space to store the array, for algorithms where this space is not prohibitive, 
they offer significant time savings. This trade-off is beneficial in scenarios where memory is not the limiting factor but 
time is.

##Optimization Problems:

In optimization, prefix sums can help in quickly evaluating different configurations or paths by summing up contributions 
up to a certain point.

##Data Preprocessing for Machine Learning:

Precomputing sums or averages over data segments can be useful for feature engineering or for certain types of data aggregation 
needed in machine learning preprocessing stages.

These applications highlight how prefix sums can transform problems from being computationally intensive to manageable, 
especially when dealing with large datasets or when speed is critical.






# Range Sum Queries

Range Sum Queries are one of the most straightforward and impactful applications of prefix sums. 
Here's how they work and their benefits:

What are Range Sum Queries?
Range Sum Queries involve finding the sum of elements within a specified range of an array. 
For an array A and a range [l, r] (where l is the left boundary and r is the right boundary), you want to 
compute A[l] + A[l+1] + ... + A[r].

Using Prefix Sums for Range Sum Queries

Precomputation:
First, compute the prefix sum array P where P[i] is the sum of all elements from A[0] to A[i].

Querying:
To find the sum of elements from l to r:
If l is 0, the sum is simply P[r].
Otherwise, the sum is P[r] - P[l-1]. This works because P[r] includes the sum up to r, and by subtracting P[l-1], 
you remove the sum of elements before l.

Benefits of Using Prefix Sums:

Time Complexity: After the initial O(n) time for computing the prefix sum array, each query takes O(1) time, 
significantly reducing the time for subsequent queries from O(r-l+1) to O(1).

Space Complexity: Additional O(n) space for storing the prefix sum array, but this is often a good trade-off 
for the speed gained in queries.

Flexibility: Allows for quick modifications to the array and recomputation of only the affected parts of the prefix sum array.

Implementation Example in Python:
python
def create_prefix_sum(arr):
    prefix_sum = [0] * len(arr)
    prefix_sum[0] = arr[0]
    for i in range(1, len(arr)):
        prefix_sum[i] = prefix_sum[i-1] + arr[i]
    return prefix_sum

def range_sum_query(prefix_sum, l, r):
    if l == 0:
        return prefix_sum[r]
    return prefix_sum[r] - prefix_sum[l-1]

# Example usage
A = [1, 3, 4, 8, 6, 1, 4, 2]
P = create_prefix_sum(A)

See src/prefix_sums/example03.cpp

# Query for sum from index 2 to 5
print(range_sum_query(P, 2, 5))  # Output should be 19 (4+8+6+1)

Applications:
Database Systems: Efficiently answering sum queries for large datasets in real-time analytics.

Algorithmic Problems: Common in coding challenges where you need to process multiple queries quickly.

Financial Systems: Quick aggregation of financial data over time periods.

Graphics: For computing sums over regions in image processing or game development where performance is key. (This is good to know given
That I'm a game developer)

Considerations:
Updates: If the original array changes, you must update the prefix sum array accordingly, which can be done in O(1) per update if you only modify one element.
Large Arrays: For very large arrays, the additional memory for the prefix sum might be a concern, though often the time savings justify this.

This approach with prefix sums makes range sum queries one of the most optimized operations for scenarios involving frequent sum computations over different parts of an array.


1
Array: [1, 2, 3, 4]
Prefix Sum: [1, 3, 6, 10]
    a. Sum(1, 2) = 5
    b. Sum(2, 3) = 7
    c. Sum(0, 3) = 10

2
Array: [5, -1, 3, 7]
Prefix Sum: [5, 4, 7, 14]
    a. Sum(1, 2) = 2
    b. Sum(2, 3) = 10
    c. Sum(0, 3) = 14
3
Array: [-1, -2, -3, -4]
Prefix Sum: [-1, -3, -6, -10]
    a. Sum(1, 2) = -5
    b. Sum(2, 3) = -7
    c. Sum(0, 3) = -10

4
Array: [9, 8, 7, 6, 5]
Prefix Sum: [9, 17, 24, 30, 35]
    a. Sum(1, 3) = 21
    b. Sum(2, 4) = 18
    c. Sum(0, 4) = 35


see src/prefix_sums/example04.cpp

Solve Leetcode Problem 303 Range Sum Query ~ Immutable Easy
https://leetcode.com/problems/range-sum-query-immutable/description/

see src/prefix_sums/leetcode_problem_303.cpp

Solve Leetcode Problem 307 Range Sum Query ~ Mutable Medium
https://leetcode.com/problems/range-sum-query-mutable/

see src/prefix_sums/leetcode_problem_307.cpp



## Subarray Problems

Subarray problems are a common class of algorithmic challenges where you need to analyze or compute 
something based on contiguous segments of an array. Prefix sums play a significant role in solving 
many of these problems efficiently. Here are some key subarray problems where prefix sums are 
particularly useful:

1. Maximum Subarray Sum (Kadane's Algorithm)

Problem: Find the contiguous subarray (containing at least one number) which has the largest sum.

Prefix Sum Use: While Kadane's algorithm doesn't strictly use prefix sums, a variation can involve 
computing prefix sums to find the maximum sum in O(n) time by considering all possible starting 
points.

See src/prefix_sums/example05.cpp (Prefix Sums + Kadane's Algorithm)
See notes/prefix_sums/kadane_algorithm.txt For the most optimal way to solve Maximum Subarray Sum
See src/prefix_sums/example05_kadane_algorithm.cpp

Also check out leetcode problem 53 (which I solved accendently lol)

https://leetcode.com/problems/maximum-subarray/description/

2. Subarray with Given Sum

Problem: Find if there exists a subarray with sum equal to K.

Prefix Sum Use: Use a hash map to store the frequency of each prefix sum; if sum - K has been seen 
before, a subarray with sum K exists. This reduces the problem from O(n^2) to O(n).

See src/prefix_sums/example06.cpp

3. Count Subarrays with Sum Zero

Problem: Count how many subarrays have a sum of zero.

Prefix Sum Use: Similar to the above, use a hash map to count how many times each prefix sum occurs. 
If a prefix sum repeats, it means there's at least one subarray with sum zero for each repeat.

See src/prefix_sums/example07.cpp

4. Subarray with Sum Divisible by K

Problem: Find if there's a subarray with sum divisible by K.

Prefix Sum Use: Compute prefix sums modulo K. If two prefix sums have the same remainder when divided 
by K, there's a subarray with sum divisible by K.

See src/prefix_sums/example08.cpp

5. Longest Subarray with Sum K

Problem: Find the length of the longest subarray with sum K.

Prefix Sum Use: Similar to finding a subarray with sum K, but track the maximum length between two indices 
where the difference in their prefix sums equals K.

6. Smallest Subarray with Sum Greater Than K

Problem: Find the smallest subarray length with sum greater than K.

Prefix Sum Use: Use a sliding window with help from prefix sums to efficiently manage the window's sum.

7. Subarrays with All Elements Equal

Problem: Count subarrays where all elements are equal to K.

Prefix Sum Use: While not strictly using prefix sums, you can use them to quickly check ranges if combined 
with a preprocessing step to count occurrences of K.

8. Subarray with Exactly K Distinct Elements

Problem: Find if there exists a subarray with exactly K distinct elements.

Prefix Sum Use: This problem typically uses sliding windows, but prefix sums can be used in preprocessing 
to speed up certain checks or in combination with other data structures like hash maps.

Implementation Example:

Here's a simple example for finding a subarray with sum K using prefix sums in Python:

python
def subarraySum(nums, k):
    count = {0: 1}  # Map to store number of prefix sums
    current_sum = 0
    result = 0

    for num in nums:
        current_sum += num
        if current_sum - k in count:
            result += count[current_sum - k]
        count[current_sum] = count.get(current_sum, 0) + 1

    return result

# Example usage
nums = [1, 2, 3, 4, 5]
k = 9
print(subarraySum(nums, k))  # Output: 2 (1,2,3,4) and (2,3,4)

Considerations:
Space Complexity: Using hash maps or additional arrays for prefix sums increases space usage, 
which might be a concern for very large datasets.


Time Complexity: Prefix sums often turn quadratic or worse time complexities into linear ones, 
significantly speeding up solutions.

Prefix sums are a versatile tool in solving subarray problems, offering a way to quickly check 
conditions across various ranges of an array with a single pass through the data.